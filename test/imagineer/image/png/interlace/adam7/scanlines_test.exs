defmodule Imagineer.Image.PNG.Interlace.Adam7.ScanlinesTest do
  alias Imagineer.Image.PNG
  alias PNG.Interlace.Adam7
  use ExUnit.Case, async: true

  test "extracting scanlines from interlaced image content" do
    # Test 3x3 RGB image with bit-depth of 8. Each scanline is Paeth filtered
    test_image_content = <<4,0,0,0,4,2,0,0,4,0,2,0,2,2,0,4,1,0,0,4,1,2,0,4,0,1,0,1,1,0,2,1,0>>
    test_image = %PNG{
      width: 3,
      height: 3,
      decompressed_data: test_image_content,
      color_format: :rgb,
      bit_depth: 8
    }
    assert Adam7.Scanlines.extract(test_image) == [
      [<<4,0,0,0>>],
      [],
      [],
      [<<4,2,0,0>>],
      [<<4,0,2,0,2,2,0>>],
      [<<4,1,0,0>>, <<4,1,2,0>>],
      [<<4,0,1,0,1,1,0,2,1,0>>]
    ]
  end

  # @unfiltered_rows [
  #   [<<34>>, <<136>>, <<34>>, <<136>>],
  #   [<<119>>, <<221>>, <<119>>, <<221>>],
  #   [<<108, 108>>, <<198, 198>>, <<108, 108>>, <<198, 198>>],
  #   [<<27, 27>>, <<108, 108>>, <<177, 177>>, <<198, 198>>, <<27, 27>>, <<108, 108>>, <<177, 177>>, <<198, 198>>],
  #   [<<5, 175, 5, 175>>, <<90, 240, 90, 240>>, <<175, 5, 175, 5>>, <<240, 90, 240, 90>>, <<5, 175, 5, 175>>, <<90, 240, 90, 240>>, <<175, 5, 175, 5>>, <<240, 90, 240, 90>>],
  #   [<<5, 175, 5, 175>>, <<5, 175, 5, 175>>, <<90, 240, 90, 240>>, <<90, 240, 90, 240>>, <<175, 5, 175, 5>>, <<175, 5, 175, 5>>, <<240, 90, 240, 90>>, <<240, 90, 240, 90>>, <<5, 175, 5, 175>>, <<5, 175, 5, 175>>, <<90, 240, 90, 240>>, <<90, 240, 90, 240>>, <<175, 5, 175, 5>>, <<175, 5, 175, 5>>, <<240, 90, 240, 90>>, <<240, 90, 240, 90>>],
  #   [<<0, 85, 170, 255, 0, 85, 170, 255>>, <<0, 85, 170, 255, 0, 85, 170, 255>>, <<85, 170, 255, 0, 85, 170, 255, 0>>, <<85, 170, 255, 0, 85, 170, 255, 0>>, <<170, 255, 0, 85, 170, 255, 0, 85>>, <<170, 255, 0, 85, 170, 255, 0, 85>>, <<255, 0, 85, 170, 255, 0, 85, 170>>, <<255, 0, 85, 170, 255, 0, 85, 170>>, <<0, 85, 170, 255, 0, 85, 170, 255>>, <<0, 85, 170, 255, 0, 85, 170, 255>>, <<85, 170, 255, 0, 85, 170, 255, 0>>, <<85, 170, 255, 0, 85, 170, 255, 0>>, <<170, 255, 0, 85, 170, 255, 0, 85>>, <<170, 255, 0, 85, 170, 255, 0, 85>>, <<255, 0, 85, 170, 255, 0, 85, 170>>, <<255, 0, 85, 170, 255, 0, 85, 170>>]
  # ]

  # # Pass 1 pixel chunks
  # @pass1 [
  #   [<<0::2>>,  <<2::2>>,  <<0::2>>,  <<2::2>>],
  #   [<<2::2>>,  <<0::2>>,  <<2::2>>,  <<0::2>>],
  #   [<<0::2>>,  <<2::2>>,  <<0::2>>,  <<2::2>>],
  #   [<<2::2>>,  <<0::2>>,  <<2::2>>,  <<0::2>>]
  # ]

  # # Pass 2 pixel chunks
  # @pass2 [
  #   [<<1::2>>,  <<3::2>>,  <<1::2>>,  <<3::2>>],
  #   [<<3::2>>,  <<1::2>>,  <<3::2>>,  <<1::2>>],
  #   [<<1::2>>,  <<3::2>>,  <<1::2>>,  <<3::2>>],
  #   [<<3::2>>,  <<1::2>>,  <<3::2>>,  <<1::2>>]
  # ]

  # # Pass 3 pixel chunks
  # @pass3 [
  #   [<<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>],
  #   [<<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>],
  #   [<<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>],
  #   [<<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>]
  # ]

  # # Pass 4 pixel chunks
  # @pass4 [
  #   [<<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>],
  #   [<<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>],
  #   [<<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>],
  #   [<<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>],
  #   [<<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>],
  #   [<<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>],
  #   [<<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>],
  #   [<<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>,  <<3::2>>,  <<0::2>>,  <<1::2>>,  <<2::2>>]
  # ]

  # # Pass 5 pixel chunks
  # @pass5 [
  #   [<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>],
  #   [<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>],
  #   [<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>],
  #   [<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>],
  #   [<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>],
  #   [<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>],
  #   [<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>],
  #   [<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>]
  # ]

  # # Pass 6 pixel chunks
  # @pass6 [
  #   [<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>],
  #   [<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>],
  #   [<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>],
  #   [<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>],
  #   [<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>],
  #   [<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>],
  #   [<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>],
  #   [<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>],
  #   [<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>],
  #   [<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>],
  #   [<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>],
  #   [<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>],
  #   [<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>],
  #   [<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>],
  #   [<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>],
  #   [<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>]
  # ]

  # # Pass 7 pixel chunks
  # @pass7 [
  #   [<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>],
  #   [<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>],
  #   [<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>],
  #   [<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>],
  #   [<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>],
  #   [<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>],
  #   [<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>],
  #   [<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>],
  #   [<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>],
  #   [<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>],
  #   [<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>],
  #   [<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>],
  #   [<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>],
  #   [<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>],
  #   [<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>],
  #   [<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<3::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<0::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<1::2>>,<<2::2>>,<<2::2>>,<<2::2>>,<<2::2>>]
  # ]
  # test "split_pixels" do
  #   passes = Adam7.Scanlines.split_pixels({32, 32, 2}, @unfiltered_rows)
  #   assert Enum.at(passes, 0) == @pass1
  #   assert Enum.at(passes, 1) == @pass2
  #   assert Enum.at(passes, 2) == @pass3
  #   assert Enum.at(passes, 3) == @pass4
  #   assert Enum.at(passes, 4) == @pass5
  #   assert Enum.at(passes, 5) == @pass6
  #   assert Enum.at(passes, 6) == @pass7
  # end
end
